var d=Object.defineProperty;var a=(s,t,e)=>t in s?d(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var n=(s,t,e)=>(a(s,typeof t!="symbol"?t+"":t,e),e);function f(s){function t(e,i){i[e.my_id]=e;for(let r of e.sons)t(r,i);return i}return t(s,{})}function h(s,t=-1){if(s.sort((i,r)=>i[2]<r[2]?1:0),t>0){let i=s.filter(r=>r[0]==t)[0];i[1]=-1}let e=i=>Object.values(s.filter(r=>r[1]==i)).map(r=>({my_id:r[0],father_id:i,sons:e(r[0])}));return{my_id:-1,father_id:-1,sons:e(-1)}}function c(s){let t=(e,i)=>{let r=[[e.my_id,e.father_id,i]];e.my_id<0&&(r=[]);for(let _ in e.sons){let o=parseInt(_);r=[...r,...t(e.sons[o],o)]}return r};return t(s,-1)}class u{constructor(t,e){n(this,"root_id");n(this,"nodetree");n(this,"_id2node");t!=null&&this.update_rawinfo(t,e)}deepcopy(){return new u(this.get_raw(),this.root_id)}update_nodetree(t){return this.nodetree=t,this._id2node=f(t),this}update_rawinfo(t,e){this.root_id=e;let i=h(t,e);return this.update_nodetree(i),this}id2node(t){return this._id2node[t]}get_raw(){return c(this.nodetree)}get_root(){return this.nodetree}is_son(t,e){for(;e=this.id2node(e).father_id,e!=-1;)if(e==t)return!0;return!1}}export{u as N};
